;;; package --- Summary
;;; Commentary:

;;; Code:

;; editor
(setq select-enable-clipboard t)
(setq dired-listing-switches "-aBhl  --group-directories-first")
(setq inhibit-startup-screen t)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))
	(:eval (if (buffer-modified-p)
                   " *"))
	" - Emacs")
      )
;; (setq debug-on-error t)
(setq-default linum-format "%d ") ;; Integer followed by space
(setq-default mode-line-format
	      '("%e"
		mode-line-front-space
		mode-line-mule-info
		mode-line-client
		mode-line-modified
		mode-line-remote
		mode-line-frame-identification
		;; mode-line-buffer-identification
		(:eval (abbreviate-file-name (buffer-file-name)))
		"  "
		mode-line-position

		(vc-mode vc-mode)
		"  "
		mode-line-modes
		mode-line-misc-info
		mode-line-end-spaces))
(setq backup-directory-alist '(("." . "~/.emacs_backups")))
(setq-default company-quickhelp-color-background "#000000")
(setq-default web-mode-engines-alist
	      '(("go"    . "\\.tmpl\\'"))
	      )

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(electric-pair-mode t)
;; (global-linum-mode t)

(global-display-line-numbers-mode 1)
;; Alternatively, to use it only in programming modes:
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

(add-to-list 'load-path "~/.emacs.d/lisp/")

(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width . 100))
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono"))

;; keybindings
(global-set-key (kbd "M-p") 'previous-line)
(global-set-key (kbd "M-n") 'next-line)
(global-set-key (kbd "C-<return>") 'browse-url-at-point)
(global-set-key (kbd "C-c C-/") 'comment-line)
(global-set-key (kbd "C-c C-<tab>") 'previous-buffer)

;; proxy
(setq url-proxy-services
      '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
	("http" . "127.0.0.1:1089")
	("https" . "127.0.0.1:1089")))

;; melpa
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(keyfreq winum docker-compose-mode dockerfile-mode docker restart-emacs web-mode rg company-quickhelp tide typescript-mode emmet-mode projectile-rails expand-region company-box which-key god-mode yasnippet yafolding neotree ripgrep projectile company magit lsp-ui dumb-jump go-mode multiple-cursors helm lsp-mode flycheck zeno-theme use-package)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(load-theme 'zeno t)

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(use-package lsp-mode
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  ;; (setq lsp-keymap-prefix "C-c l")
  (setq lsp-auto-guess-root t)
  :hook (go-mode . lsp-deferred)
  :commands (lsp lsp-deferred)
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-position 'at-point
        lsp-ui-doc-header t
        lsp-ui-doc-include-signature t
	lsp-ui-doc-delay 1
	lsp-ui-doc-show-with-cursor t)
  (use-package lsp-ui-doc))

(defun my-go-mode-hook ()
  ;; Use goimports instead of go-fmt
  (setq-default gofmt-command "goimports")
  ;; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  (unbind-key "C-c C-d" 'go-mode-map)
  ;; Customize compile command to run go build
  ;; (if (not (string-match "go" compile-command))
  ;;     (set (make-local-variable 'compile-command)
  ;;          "go build -v && go test -v && go vet"))
  ;; Godef jump key binding
  ;; (local-set-key (kbd "M-.") 'godef-jump)
  ;; (local-set-key (kbd "M-*") 'pop-tag-mark)
  )

(use-package go-mode
  :ensure t
  :hook ((go-mode . my-go-mode-hook)
	 (go-mode . hs-minor-mode)))

(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  :bind (("M-x" . helm-M-x)
         ("C-x C-b" . helm-mini)
         ("C-x C-f" . helm-find-files)))

(use-package multiple-cursors
  :ensure t
  :bind (("C-c m c" . mc/edit-lines)
         ("C-c m n" . mc/mark-next-like-this)
         ("C-c m p" . mc/mark-previous-like-this)
         ("C-c m a" . mc/mark-all-like-this)))

(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  :bind
  (("C-c p" . projectile-command-map)))

(use-package neotree
  :ensure t
  :bind(("C-c n" . neotree-toggle)))

(use-package yafolding
  :ensure t
  :config
  (yafolding-mode 1)
  :bind
  (("C-{" . yafolding-hide-element)
   ("C-}" . yafolding-show-element)))

;; (use-package god-mode
;;   :ensure t
;;   ;; :init
;;   ;; (god-mode-all)
;;   :hook (after-init . god-mode)
;;   :bind (("C-c g" . god-mode-all)
;; 	 ("<escape>" . god-mode-all)))

(use-package which-key
  :ensure t
  :config
  (which-key-mode +1))

(use-package company
  :ensure t
  :hook (after-init . global-company-mode))

;; (use-package company-box
;;   :ensure t
;;   :hook (company-mode . company-box-mode))

(use-package company-quickhelp
  :ensure t
  :config
  :hook (company-mode . company-quickhelp-mode))

(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))

(use-package expand-region
  :ensure t
  :bind (("C-'" . er/expand-region)))

(use-package view
  :bind (:map view-mode-map
	      ("n" . next-line)
	      ("p" . previous-line)
	      ("v" . scroll-up-command)
	      ("M-v" . scroll-down-command)))

(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))

(use-package web-mode
  :ensure t
  :mode (("\\.tmpl\\'" . web-mode)))

(use-package typescript-mode
  :ensure t
  :mode (("\\.js\\'" . typescript-mode)))

(use-package emmet-mode
  :ensure t
  :hook ((web-mode . emmet-mode)))

(use-package winum
  :ensure t
  :config (winum-mode 1))

(require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)

;; (eval-after-load 'flycheck
;;    '(flycheck-add-mode 'html-tidy 'web-mode))

(require 'bind-key)
(bind-key* "C-c C-d" 'mc/mark-next-like-this)
(bind-key* "C-c C-f" 'projectile-find-file)
(bind-key* "C-c C-r" 'rg)

(provide '.emacs)

(put 'narrow-to-region 'disabled nil)

;; (add-hook 'go-mode-hook 'lsp-deferred)

(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
(add-hook 'html-mode-hook 'emmet-mode)
;; (add-hook 'minibuffer-setup-hook )
;; (add-hook 'after-init-hook 'global-company-mode)

;;; .emacs ends here
